plotTraj(data = epi1)
trajLogLike(SIR, theta, init.state, epi1)
SIR$genObsPoint(model.point = c(I = 31), theta)
SIR$genObsPoint(model.point = c(I = 31), theta)
obs.traj <- genObsTraj(SIR, theta, init.state, epi1$time)
head(obs.traj)
my_logPosterior <- function(fitmodel, theta, init.state, data) {
# calculate the fitmodel prior for parameter vector theta using
# fitmodel$logPrior, and assign to variable log.prior
log.prior <- fitmodel$logPrior(theta)
# calculate the fitmodel prior for parameter vector theta using
# fitmodel$logPrior, and assign to variable log.prior
log.likelihood <- trajLogLike(fitmodel, theta, init.state, data)
# calulate the log-posterior using the log-prior and log-likelihood
log.posterior <- log.prior + log.likelihood
return(log.posterior)
}
my_logPosterior(SIR, theta, init.state, epi1)
plotFit(SIR, theta, init.state, epi1)
source('~/.active-rstudio-document', echo=TRUE)
plot(dnorm,
xlim = c(-5, 5),
ylab = "probability density")
dnorm.log <- function(theta) {
return(dnorm(x = theta, mean = 0, sd = 1, log = TRUE))
}
starting.value <- 1 # starting value for MCMC
sigma <- 1 # standard deviation of MCMC
iter <- 1000
trace <- my_mcmcMH(target = dnorm.log, init.theta = starting.value,
proposal.sd = sigma, n.iterations = iter)
plot(trace, type = "l")
?my_logPosterior
??my_logPosterior
my_logPosterior
my_logPosterior_epi1 <- function(theta) {
return(my_logPosterior(fitmodel = SIR,
theta = theta,
init.state = c(S = 999, I = 1, R = 0),
data = epi1))
}
my_logPosterior_epi1(c(R0 = 3, D.inf = 2))
mcmc.epi3 <- mcmcMH(target = my_logPosterior_epi3,
init.theta = c(R0 = 1, D.inf = 2),
proposal.sd = c(0.01, 0.1),
n.iterations = 1000)
rejectionRate(mcmc.trace)
mcmc.trace <- mcmc(trace)
rejectionRate(mcmc.trace)
effectiveSize(mcmc.trace)
mcmc.trace.burned <- burnAndThin(mcmc.trace, burn = 1000)
plot(mcmc.trace.burned)
data(mcmc)
trace <- mcmc.epi3$trace
head(trace)
mcmc.trace <- mcmc(trace)
rejectionRate(mcmc.trace)
effectiveSize(mcmc.trace)
mcmc.trace.burned <- burnAndThin(mcmc.trace, burn = 1000)
plot(mcmc.trace.burned)
library(plyr); library(ggplot2);library(reshape2);library(deSolve);library(grid)
##*** Locations
home<-"~/Documents/My Documents/Diagnostics/Natural history/genfun/"
plots<-"~/Documents/My Documents/Diagnostics/Natural history/genfun/plots"
setwd(home)
##*** Code needed
# Loads functions for generalised mean function and simulation model that uses the generalised function
# Also 2 fitness level ode function, original Sourya model as a difference model and multiplots function
source("generalised_function.R")
##*** Setting up
# Number of discrete levels?
nfit = 10
# Matrices of distribution of fitness
M0 <- matrix(0,nfit,10)
rownames(M0)<-seq(1/nfit,1,1/nfit) # Currently relative fitness of 1 is upper limit
L0 <- matrix(0,nfit,10)
rownames(L0)<-seq(1/nfit,1,1/nfit)
dt = 0.1
S<-sourya(3000,home, c(0,0.6,0.035),c(0,0,100,0))
iniv<-c(S$Ls[3001],S$Lr[3001],S$As[3001],S$Ar[3001],0,0)
Ls0=S$Ls[3001]; As0=S$As[3001]; N=1000000
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
X<-meanfit_vars(M0,L0,10,0,0.14,1,0,0,0,nfit,"orig",0.01)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
X<-meanfit_vars(M0,L0,10,0,0.14,1,0,0,0,nfit,"orig",0.01)
X$meanfit
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$meanf,col="black")
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$activeR,col="black")
legend(100,150,c("2 levels ode model","Generalised fit function"),c("blue","black"))
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$activeR,col="black")
legend(100,150,c("2 levels ode model","Generalised fit function"),c("blue","black"))
G<-data.frame(matrix(0,1,4)); colnames(G)<-c(colnames(Sv$D)) # Store generalised function output
H<-data.frame(matrix(0,1,19)); colnames(H)<-colnames(out) # Store "data" from ode model
# values for propF to try
try<-seq(0.01,0.1,0.01)
for (i in 1:length(try)){
Smm<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",try[i])
G<-rbind(G,Smm$D)
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=try[i])
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6; out$propF<-try[i];  out$activeR<-out[,"Arf"]+out[,"Aru"]
H<-rbind(H,out)
}
setwd(plots)
# Plot time series
H[,"time"]=H[,"time"]*10 # as difference between ode solved time and time steps (0.1) of
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=activeR))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=activeR))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=activeR))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=activeR))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=activeR))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=activeR))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=activeR))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=activeR))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=activeR))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=activeR))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
pdf("overtimefits_Ar.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=meanf))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=meanf))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=meanf))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=meanf))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=meanf))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=meanf))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=meanf))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=meanf))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=meanf))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=meanf))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
pdf("overtimefits_mf.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
# Plot latent resistant population over time
H[,"latentR"]=H[,"Lru"]+H[,"Lrf"]
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=latentR))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=latentR))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=latentR))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=latentR))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=latentR))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=latentR))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=latentR))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=latentR))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=latentR))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=latentR))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
setwd(plots)
pdf("overtimefits_Lr.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
#*** Nicer combination fits
# Plot fit to active resistant over time and propF
Gty<-G[which(G[,"variable"]=="Ar"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=activeR,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous("Number with active cases with resistant strain")+scale_x_continuous(lim=c(0,1005))
ggsave("fit_Ar.pdf")
# Plot fit to mean relative fitness over time and propF
Gty<-G[which(G[,"variable"]=="mf"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=meanf,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous(lim=c(0.5,1),"Mean relative fitness of resistant strains")+scale_x_continuous(lim=c(0,1005))
ggsave("fit_mf.pdf")
home
ppp<-bind(home,"plot")
ppp<-bind(home,"plots")
ppp<-print(home,"plots")
paste(home,"plots")
plots
paste(home,"plots",sep="")
5/12
5*30/365
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"normal",try[i])
nfit = 10
# Matrices of distribution of fitness
M0 <- matrix(0,nfit,10)
rownames(M0)<-seq(1/nfit,1,1/nfit) # Currently relative fitness of 1 is upper limit
L0 <- matrix(0,nfit,10)
rownames(L0)<-seq(1/nfit,1,1/nfit)
# Timestep
dt = 0.1
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
# Quick check plot of above output (mean fitnes over time and active resistant, blue) and output from ode model with 2 hetero levels (black)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$meanf,col="black") # Have to plot out against 10*time due to timestep of 0.1
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$meanf,col="black") # Have to plot out against 10*time due to timestep of 0.1
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
#############********************************************** Testing
#*** Mean fitness function is, with mock numbers
X<-meanfit_vars(M0,L0,10,0,0.14,1,0,0,0,nfit,"orig",0.01)
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
# Quick check plot of above output (mean fitnes over time and active resistant, blue) and output from ode model with 2 hetero levels (black)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$meanf,col="black") # Have to plot out against 10*time due to timestep of 0.1
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$activeR,col="black")
legend(100,150,c("2 levels ode model","Generalised fit function"),c("blue","black"))
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"normal",try[i])
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",try[i])
plot(Sv$meanf,ylim=c(0,1),type="l",col="blue")
points(seq(0,100*1/0.1,1/0.1),out$meanf,col="black")
try
i
try[i]
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function_go.R', echo=TRUE)
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of 0.1
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$activeR,col="black")
legend(100,150,c("2 levels ode model","Generalised fit function"),c("blue","black"))
G<-data.frame(matrix(0,1,4)); colnames(G)<-c(colnames(Sv$D)) # Store generalised function output
H<-data.frame(matrix(0,1,19)); colnames(H)<-colnames(out) # Store "data" from ode model
# values for propF to try
try<-seq(0.01,0.1,0.01)
for (i in 1:length(try)){
Smm<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",try[i])
G<-rbind(G,Smm$D)
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=try[i])
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6; out$propF<-try[i];  out$activeR<-out[,"Arf"]+out[,"Aru"]
H<-rbind(H,out)
}
setwd(plots)
# Plot time series
H[,"time"]=H[,"time"]*(1/dt) # as difference between ode solved time and time steps (0.1) of
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=activeR))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=activeR))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=activeR))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=activeR))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=activeR))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=activeR))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=activeR))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=activeR))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=activeR))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="Ar"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Number with Ar")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=activeR))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
pdf("overtimefits_Ar.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=meanf))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=meanf))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=meanf))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=meanf))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=meanf))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=meanf))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=meanf))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=meanf))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=meanf))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=meanf))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
pdf("overtimefits_mf.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
# Plot latent resistant population over time
H[,"latentR"]=H[,"Lru"]+H[,"Lrf"]
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=latentR))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p2=ggplot(G[which(G[,"propF"]==0.02&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p2=p2+geom_line(data=H[which(H[,"propF"]==0.02),],aes(x=time,y=latentR))+ggtitle("propF=2%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p3=ggplot(G[which(G[,"propF"]==0.03&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p3=p3+geom_line(data=H[which(H[,"propF"]==0.03),],aes(x=time,y=latentR))+ggtitle("propF=3%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4=ggplot(G[which(G[,"propF"]==0.04&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p4=p4+geom_line(data=H[which(H[,"propF"]==0.04),],aes(x=time,y=latentR))+ggtitle("propF=4%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p5=ggplot(G[which(G[,"propF"]==0.05&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p5=p5+geom_line(data=H[which(H[,"propF"]==0.05),],aes(x=time,y=latentR))+ggtitle("propF=5%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p6=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[7]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p6=p6+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[7]),],aes(x=time,y=latentR))+ggtitle("propF=6%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p7=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[8]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p7=p7+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[8]),],aes(x=time,y=latentR))+ggtitle("propF=7%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p8=ggplot(G[which(G[,"propF"]==0.08&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p8=p8+geom_line(data=H[which(H[,"propF"]==0.08),],aes(x=time,y=latentR))+ggtitle("propF=8%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p9=ggplot(G[which(G[,"propF"]==0.09&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p9=p9+geom_line(data=H[which(H[,"propF"]==0.09),],aes(x=time,y=latentR))+ggtitle("propF=9%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p10=ggplot(G[which(G[,"propF"]==unique(G[,"propF"])[11]&G[,"variable"]=="Lr"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p10=p10+geom_line(data=H[which(H[,"propF"]==unique(G[,"propF"])[11]),],aes(x=time,y=latentR))+ggtitle("propF=10%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
setwd(plots)
pdf("overtimefits_Lr.pdf")
multiplot(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,cols=5)
dev.off()
#*** Nicer combination fits
# Plot fit to active resistant over time and propF
Gty<-G[which(G[,"variable"]=="Ar"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=activeR,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous("Number with active cases with resistant strain")+scale_x_continuous(lim=c(0,1005))
ggsave("fit_Ar.pdf")
# Plot fit to mean relative fitness over time and propF
Gty<-G[which(G[,"variable"]=="mf"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=meanf,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous(lim=c(0.5,1),"Mean relative fitness of resistant strains")+scale_x_continuous(lim=c(0,1005))
ggsave("fit_mf.pdf")
Gty<-G[which(G[,"variable"]=="Ar"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=activeR,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous("Number with active cases with resistant strain")
ggsave("fit_Ar.pdf")
Gty<-G[which(G[,"variable"]=="mf"),]
ggplot(Gty,aes(x=time,y=value,colour=factor(propF)))+geom_line()+geom_point(data=H,aes(x=time,y=meanf,colour=factor(propF)))+scale_color_discrete("propF")+scale_y_continuous(lim=c(0.5,1),"Mean relative fitness of resistant strains")
ggsave("fit_mf.pdf")
dt
geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=activeR))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
setwd(home) # might have para in different place for different models
para<-read.csv("para.csv",header=TRUE,check.names=F,stringsAsFactors = FALSE);
para
p1=ggplot(G[which(G[,"propF"]==0.01&G[,"variable"]=="mf"),],aes(x=time,y=value))+geom_line(col="red")+scale_y_continuous("Mean fitness")
p1=p1+geom_line(data=H[which(H[,"propF"]==0.01),],aes(x=time,y=meanf))+ggtitle("propF=1%")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
p1
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
plot(out$meanf)
dt=0.1
points(seq(0,100*1/dt,1/dt),out$meanf,col="red") # Have to plot out against 10*time due to timestep of 0.1
dt=0.01
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
plot(out$Ar)
out$Ar
head(out)
plot(out$activeR)
dt=0.1
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
lines(out$activeR)
length(seq(0,100*1/dt,1/dt))
dt
dt=0.01
length(seq(0,100*1/dt,1/dt))
para
dt
dt = 0.1
S<-sourya(3000,home, c(0,0.6,0.035),c(0,0,100,0))
iniv<-c(S$Ls[3001],S$Lr[3001],S$As[3001],S$Ar[3001],0,0)
Ls0=S$Ls[3001]; As0=S$As[3001]; N=1000000
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
dt
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/0.01,1/0.01),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
head(Sv)
list(Sv)
dim(Sv$D)
dim(Sv$meanf)
length(Sv$meanf)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function_go.R', echo=TRUE)
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
length(Sv$meanf)
1/dt*100
Sv<-sourya_funcf_mean_vars(1000,home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
length(Sv$meanf)
Sv<-sourya_funcf_mean_vars(10000,home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
length(Sv$meanf)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
source("generalised_function.R")
nfit = 10
# Matrices of distribution of fitness
M0 <- matrix(0,nfit,10)
rownames(M0)<-seq(1/nfit,1,1/nfit) # Currently relative fitness of 1 is upper limit
L0 <- matrix(0,nfit,10)
rownames(L0)<-seq(1/nfit,1,1/nfit)
#*** Baseline model - for "fitting" initial conditions
S<-sourya(3000,home, c(0,0.6,0.035),c(0,0,100,0))
iniv<-c(S$Ls[3001],S$Lr[3001],S$As[3001],S$Ar[3001],0,0)
Ls0=S$Ls[3001]; As0=S$As[3001]; N=1000000
dt = 0.1
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
X<-meanfit_vars(M0,L0,10,0,0.14,1,0,0,0,nfit,"orig",0.01)
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
dt=0.01
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
length(Sv$meanf)
Ls0
As0
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
S<-sourya(3000,home, c(0,0.6,0.035),c(0,0,100,0))
iniv<-c(S$Ls[3001],S$Lr[3001],S$As[3001],S$Ar[3001],0,0)
Ls0=S$Ls[3001]; As0=S$As[3001]; N=1000000
Ls0
As0
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
out$meanf
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$activeR,col="black")
Ls0
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
S<-sourya(3000,home, c(0,0.6,0.035),c(0,0,100,0))
iniv<-c(S$Ls[3001],S$Lr[3001],S$As[3001],S$Ar[3001],0,0)
Ls0=S$Ls[3001]; As0=S$As[3001]; N=1000000
Ls0
dt = 0.1
dt=0.01
parameters_var <- c(muL=0.02,muA=0.187,beta=7.36,phi=0.0015,p=0.14,omega=1,ks=0.05,kr=0.4,chi=0.33,eps=0.008,mu=0.02,f=0.6,propF=0.01)
times <- seq(0, 100, by = 1)
state <- c(U = N-Ls0-As0,Ls=Ls0,Lru=0,Lrf=0,As=As0,Aru=0,Arf=0,IAru=0,IArf=0) # Takes initial conditions from above baseline model
out <- data.frame(ode(y = state, times = times, func = twor_var, parms = parameters_var))
# additional output
out$meanf<-(out[, "Arf"]/(out[, "Aru"]+out[, "Arf"])) + 0.6*(out[, "Aru"]/(out[, "Aru"]+out[, "Arf"])); out$meanf[1]<-0.6
out$propF<-0.01; out$activeR<-out[,"Arf"]+out[,"Aru"]
dt
Sv<-sourya_funcf_mean_vars(100*(1/dt),home, c(0.008,0.6,0.35),iniv,M0,L0,"orig",0.01)
plot(Sv$meanf,ylim=c(0.5,1),type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$meanf,col="black") # Have to plot out against 10*time due to timestep of dt
legend(200,0.6,c("2 levels ode model","Generalised fit function"),c("blue","black"))
plot(Sv$"Ar",type="l",col="blue")
points(seq(0,100*1/dt,1/dt),out$activeR,col="black")
legend(100,150,c("2 levels ode model","Generalised fit function"),c("blue","black"))
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function.R', echo=TRUE)
source('~/Documents/My Documents/Diagnostics/Natural history/genfun/generalised_function_go.R', echo=TRUE)
